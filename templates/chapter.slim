doctype html
html lang='en'
  head
    meta charset='utf-8'
    title ŚB #{canto}.#{number}, #{title}

    meta[name="viewport" content="width=device-width, initial-scale=1.0"]
    link[rel="stylesheet" href="https://stackedit.io/style.css"]
    link[rel="preconnect" href="https://fonts.gstatic.com"]
    link[href="https://fonts.googleapis.com/css2?family=Manuale:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&family=Roboto+Slab&display=swap" rel="stylesheet"]


    script src="https://code.jquery.com/jquery-3.6.0.slim.min.js"
    / link href="https://cdn.jsdelivr.net/npm/daisyui@2.15.2/dist/full.css" rel="stylesheet"
    link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous"
    script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js" integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"
    script src="https://cdn.tailwindcss.com?plugins=typography"
    
    javascript:
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              clifford: '#da373d',
            }
          }
        },
      }

    javascript: 
      $(document).ready(function() {
      
        current_verse_highlighted = false;
      
        $('.verse_num').click(function() {
          console.log('haribol!')
          current_verse_highlighted = $(this).parents('.verse')[0]
          toggleVerseHighlight(current_verse_highlighted)
      
        })
      
        $(document).keydown(function(event) {
          if (current_verse_highlighted != false) {
            const callback = {
              'ArrowUp'   : moveHighlightToPrevVerse,
              'ArrowDown' : moveHighlightToNextVerse,
            }[event.key]
            callback?.(event)
          }
        })
      
      });
      

      function toggleVerseHighlight(verseElement, scrollToCenter = false) {
        el = $($(verseElement).find('.verse_translation')[0]).toggleClass('current_highlight').get(0)
        if (scrollToCenter) {
          el.scrollIntoView({behavior: 'smooth', block: 'center'})
        }
      }


      function moveHighlightToNextVerse(event) {
        event.preventDefault()
        toggleVerseHighlight(current_verse_highlighted)
        current_verse_highlighted = $(current_verse_highlighted).next()
        toggleVerseHighlight(current_verse_highlighted, true)

      }
      
      function moveHighlightToPrevVerse(event) {
        event.preventDefault()
        toggleVerseHighlight(current_verse_highlighted)
        current_verse_highlighted = $(current_verse_highlighted).prev()
        toggleVerseHighlight(current_verse_highlighted, true)
      }




    css: 
      body {
        color: #111;
        /* font-size: 24px; */
        /* font-family: 'Times New Roman', 'Manuale', serif; */
        font-variant-ligatures: common-ligatures;
        line-height: 1.67;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        background-color: antiquewhite;
      }
      .collapse.show {
        visibility: visible;
      }
      .verse_controls {
        margin-bottom: -0.65rem; 
      }
      .verse_translation {
        font-weight: bold;
        /* text-indent: -2rem; */
      }
      .verse_translation p {
        margin-top: 0.5rem;
        margin-bottom: 0.7rem;
        font-size: 20px;
      }
      .verse_purport_content p {
        font-size: 18px
      }
      .verse_num {
        /* position: absolute; */
        /* float: right; */
        /* right: 0.5rem; */
        text-align: right;
        color: #555;
        font-size: 0.9em;
        font-weight: normal;
      }
      .text_source_copied_date {
        display: block;
        font-size: 0.8em;
        color: #555;
      }
      .verse_controls {
        text-align: right;
      }
      .purport_wordcount {
        text-color: 
      }
      .current_highlight {
        border: 1px dotted;
        border-radius: 1rem;
        padding: 0 1rem;
        margin: auto -1rem;
        background: rgba(0,0,108,0.2);
        font-weight: bold;
      }
      .current_highlight p {

      }
      .Italic { /* holdover from source */
        font-style: italic;
      }
      .summary div.Normal-Level { 
        /* these are basically paragraphs in the chapter summary */
        margin-bottom: 1rem;

      }

  body
    div.prose.lg:prose-2xl.m-auto.container.p-4
      h2 Śrīmad-Bhāgavatam, Canto #{canto}:<br>
        #{Bhāgavatamr::CANTOS[canto.to_i]}

      h1.text-3xl #{fancy_number}:<br>#{title}

      / - binding.pry
      - unless summary.empty? && summary_paragraphs.empty?
        h3 Chapter Summary
        - unless summary.empty?
          div.summary== summary.to_s
        - unless summary_paragraphs.empty?
          .summary
            - summary_paragraphs.each do |para|
              p == para


      - verses.each do |verse_num, verse|
        div.verse data-verse_num="#{verse_num}"
          .verse_controls
            button.verse_num.btn
              | [#{verse.num_range}.] 
            - if verse.purport_html_paragraphs.count > 0
              span.verse_purport
                button [class="btn btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#verse_#{verse_num}_purport"                   aria-expanded="false" aria-controls="collapseExample"] 
                  | P 
                  span.purport_wordcount.text-xs.text-gray-400 = verse.purport_html_paragraphs.reduce(0) {|wc, para| wc += para.split.count}
          .verse_translation
            p
              = verse.english_translation_text
          - if verse.purport_html_paragraphs.count > 0
            .verse_purport_content.collapse id="verse_#{verse_num}_purport"
              - verse.purport_html_paragraphs.each do |para|
                p == para 

      p 
        em == thus_ends_text
      hr
      p 
        | Text copied from: 
        a href="#{text_source_url}" #{text_source_url}
        / br
        /!  span.text_source_copied_date
          | on #{date_text_copied_from_source} 
      p == next_prev_links_raw